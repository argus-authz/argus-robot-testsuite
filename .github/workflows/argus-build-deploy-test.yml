name: Build images, deploy and run testsuite

on: 
  schedule:
    - cron: 0 1 * * *
  push:
  pull_request:

jobs:

  build-and-push-docker-testsuite:
    name: Build & Push testsuite docker image

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker meta for testsuite
        id: meta_ts
        uses: docker/metadata-action@v3
        with:
          images: argus/argus-testsuite
          flavor: 
            latest=true
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag

      - name: Build & Push image
        uses: docker/build-push-action@v2
        with:
          context: docker/testsuite
          file: ./docker/testsuite/Dockerfile
          push: true
          tags: ${{ steps.meta_ts.outputs.tags }}
          labels: ${{ steps.meta_ts.outputs.labels }}

  build-and-push-docker-argus:
    name: Build & Push argus docker image
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker meta for argus
        id: meta_argus
        uses: docker/metadata-action@v3
        with:
          images: argus/argus-deployment-test-centos7
          flavor: 
            latest=true
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag

      - name: Build & Push image
        uses: docker/build-push-action@v2
        with:
          context: docker/all-in-one-centos7
          file: ./docker/all-in-one-centos7/Dockerfile
          push: true
          tags: ${{ steps.meta_argus.outputs.tags }}
          labels: ${{ steps.meta_argus.outputs.labels }}

  run-argus-robot-testsuite:
    name: Run argus robot testsuite

    runs-on: ubuntu-latest

    needs: [build-and-push-docker-testsuite, build-and-push-docker-argus]

    env:
      ROBOT_OPTIONS: --exclude iota
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Provide trustanchors
        run: docker-compose up trust
        working-directory: compose

      - name: Start compose
        run: docker-compose --env-file .env-gh up --detach argus testsuite
        working-directory: compose

      - name: Deploy argus
        run: |
          docker-compose exec -T --workdir /scripts argus bash /scripts/setup-argus.sh
          docker-compose exec -T --workdir /scripts argus bash /scripts/start-argus.sh
        working-directory: compose

      - name: Create artifacts dir
        if: ${{ always() }}
        run: |
          ARTIFACTS_PATH=${HOME}/artifacts
          echo ARTIFACTS_PATH: ${ARTIFACTS_PATH}
          # save it in the job environment
          echo "ARTIFACTS_PATH=${ARTIFACTS_PATH}" >> ${GITHUB_ENV}
          mkdir -p ${ARTIFACTS_PATH}/argus_logs ${ARTIFACTS_PATH}/argus_conf ${ARTIFACTS_PATH}/argus_reports
      
      - name: Run testsuite
        run: docker-compose exec -T -e ROBOT_OPTIONS="${ROBOT_OPTIONS}" testsuite bash /scripts/ci-run-testsuite.sh
        working-directory: compose

      - name: Collect test reports, logs and conf
        if: ${{ always() }}
        run: |
          docker cp argus-testsuite:/tmp/reports ${ARTIFACTS_PATH}/argus_reports
          docker cp argus-testsuite_argus_1:/var/log/argus/ ${ARTIFACTS_PATH}/argus_logs
          docker cp argus-testsuite_argus_1:/etc/argus/ ${ARTIFACTS_PATH}/argus_conf
        working-directory: compose

      - name: Stop compose
        if: ${{ always() }}
        run: docker-compose down -v
        working-directory: compose

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-reports_logs_conf
          path: ${{ env.ARTIFACTS_PATH }}