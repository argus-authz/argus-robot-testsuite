#!/usr/bin/env groovy
def image, name, variables

pipeline {
  agent { label 'docker' }

  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '5'))
    ansiColor('xterm')
    timestamps()
  }

  parameters {
    string(defaultValue: "--variable T_PAP_HOST:omii001.cnaf.infn.it --variable T_PDP_HOST:omii001.cnaf.infn.it --variable T_PEP_HOST:omii001.cnaf.infn.it", description: 'Robot arguments', name: 'ROBOT_ARGS')
  }

  environment {
    ROBOT_ARGS = "${params.ROBOT_ARGS}"
  }

  stages {
    stage ('run'){
      steps {
        script {
          sh returnStatus: true, script: '''#!/bin/bash 
          set -ex
          docker-compose up trust
          docker-compose up --detach testsuite
          docker-compose exec -T testsuite bash /scripts/ci-run-testsuite.sh
          '''
        }
      }
    }

    stage('report'){
      steps {
        sh "docker cp argus-testsuite:/tmp/reports ."
        archive 'reports/**'

        step([$class: 'RobotPublisher',
          disableArchiveOutput: false,
          logFileName: 'log.html',
          otherFiles: '*.png',
          outputFileName: 'output.xml',
          outputPath: "reports",
          passThreshold: 100,
          reportFileName: 'report.html',
          unstableThreshold: 90])
      }
    }
  }

  post {
    always {
      sh '''#!/bin/bash
      set -ex
      docker-compose down -v
      '''
    }

    failure {
      slackSend color: 'danger', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Failure (<${env.BUILD_URL}|Open>)"
    }

    changed {
      script{
        if('SUCCESS'.equals(currentBuild.currentResult)) {
          slackSend color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Back to normal (<${env.BUILD_URL}|Open>)"
        }
      }
    }
  }
}